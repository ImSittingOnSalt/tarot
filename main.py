import telebot
import sqlite3
import random
from datetime import datetime, timedelta
from telebot import types

bot = telebot.TeleBot('-')
ADMIN_CHAT_ID = -
FEEDBACK_DB = 'feedback.sqlite3'

def init_feedback_db(): # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è —Ñ–∏–¥–±—ç–∫–∞
  conn = sqlite3.connect(FEEDBACK_DB)
  cursor = conn.cursor()
  cursor.execute('''CREATE TABLE IF NOT EXISTS feedback
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  username TEXT,
                  text TEXT,
                  created_at TIMESTAMP,
                  admin_reply TEXT DEFAULT NULL)''')
  conn.commit()
  conn.close()
init_feedback_db()

@bot.message_handler(commands=['start'])
def start(message):
  conn = sqlite3.connect('tarot.sqlite3')
  cur = conn.cursor()
  markup = types.ReplyKeyboardMarkup()
  btn1 = types.KeyboardButton('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç')
  btn2 = types.KeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è')
  btn3 = types.KeyboardButton('–í–∏–¥—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤')
  btn4 = types.KeyboardButton('–°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏')
  btn5 = types.KeyboardButton('–†–∞—Å—à–∏—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏')
  btn6 = types.KeyboardButton('–ü–æ–º–æ—â—å')
  btn7 = types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
  markup.row(btn1, btn2)
  markup.row(btn3, btn4)
  markup.row(btn5, btn6)
  markup.row(btn7)

  welcome_text = (
    f"‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!</b> ‚ú®\n\n"
    f"–Ø - –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –¢–∞—Ä–æ. üîÆ\n\n"
    f"–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    f"‚Ä¢ –ì–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ\n"
    f"‚Ä¢ –¢–æ–ª–∫–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ä—Ç\n"
    f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã\n\n"
    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ <b>–º–µ–Ω—é</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
    f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –Ω–∞—à–µ –º–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! üåô"
  )

  bot.send_message(message.chat.id, welcome_text, parse_mode="html", reply_markup=markup)
  #bot.reply_to(message, f"–í–∞—à ID: `{message.chat.id}`", parse_mode='Markdown')
  bot.register_next_step_handler(message, on_click)

def on_click(message):
  if message.text.lower() == '–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç':
    decks(message)
    bot.register_next_step_handler(message, on_click)
  elif message.text.lower() == '–∫–∞—Ä—Ç–∞ –¥–Ω—è':
    card = get_daily_card()
    if card:
        send_card_info(message.chat.id, card)
    else:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    bot.register_next_step_handler(message, on_click)
  elif message.text.lower() == '–≤–∏–¥—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤':
    spreads(message)
    bot.register_next_step_handler(message, on_click)
  elif message.text.lower() == '—Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏':
    custom_spread(message)
    bot.register_next_step_handler(message, on_click)
  elif message.text.lower() == '—Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏':
    buy_deck(message)
    bot.register_next_step_handler(message, on_click)
  elif message.text.lower() == '–ø–æ–º–æ—â—å':
    help(message)
    bot.register_next_step_handler(message, on_click)
  elif message.text.lower() == '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
    feedback(message)
  else:
    bot.reply_to(message, '<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã</em>', parse_mode='html')
    bot.register_next_step_handler(message, on_click)
  
@bot.message_handler(commands=['decks'])#
def decks(message):
  markup = types.InlineKeyboardMarkup()
  btn1 = types.InlineKeyboardButton('–£—ç–π—Ç–∞', callback_data = 'wate')
  btn2 = types.InlineKeyboardButton('–¢—ë–º–Ω–∞—è', callback_data = 'dark')
  btn3 = types.InlineKeyboardButton('–¢–æ—Ç–∞', callback_data = 'dark')
  btn4 = types.InlineKeyboardButton('–ú–∞—Ä—Å–µ–ª—å—Å–∫–∞—è', callback_data = 'dark')
  markup.row(btn1, btn2)
  markup.row(btn3, btn4)
  bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è –∫–æ–ª–æ–¥—É —Ç–∞—Ä–æ', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    markup = types.InlineKeyboardMarkup()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–æ–¥—ã
    if callback.data in ['wate', 'dark', 'toth', 'mars']:
        if callback.data == 'wate':
            deck_name = '–£—ç–π—Ç'
            prefix = 'w'
        elif callback.data == 'dark':
            deck_name = '–¢—ë–º–Ω–∞—è'
            prefix = 'd'
        elif callback.data == 'toth':
            deck_name = '–¢–æ—Ç–∞'
            prefix = 't'
        elif callback.data == 'mars':
            deck_name = '–ú–∞—Ä—Å–µ–ª—å—Å–∫–∞—è'
            prefix = 'm'
        
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        
        btn1 = types.InlineKeyboardButton('–°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã', callback_data=f'{prefix}_arc')
        btn2 = types.InlineKeyboardButton('–ú–µ—á–∏', callback_data=f'{prefix}_sword')
        btn3 = types.InlineKeyboardButton('–ñ–µ–∑–ª—ã', callback_data=f'{prefix}_wand')
        btn4 = types.InlineKeyboardButton('–ü–µ–Ω—Ç–∞–∫–ª–∏', callback_data=f'{prefix}_pentacle')
        btn5 = types.InlineKeyboardButton('–ö—É–±–∫–∏', callback_data=f'{prefix}_cup')
        
        markup.row(btn1)
        markup.row(btn2, btn3)
        markup.row(btn4, btn5)
        
        bot.send_message(
            callback.message.chat.id,
            f'–ö–æ–ª–æ–¥–∞: {deck_name}\n–í—ã–±–µ—Ä–∏ –º–∞—Å—Ç—å –∫–∞—Ä—Ç—ã:',
            reply_markup=markup
        )
        return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ callback_data
    parts = callback.data.split('_')
    if len(parts) != 2:
        return
    
    prefix, card_type = parts
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ä—Ç
    if card_type == 'arc':
        # –°—Ç–∞—Ä—à–∏–µ –∞—Ä–∫–∞–Ω—ã
        markup = types.InlineKeyboardMarkup(row_width=4)
        
        cards = [
            ('0. –î—É—Ä–∞–∫', f'{prefix}_fool'),
            ('I. –ú–∞–≥', f'{prefix}_magician'),
            ('II. –í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞', f'{prefix}_high_priestess'),
            ('III. –ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞', f'{prefix}_empress'),
            ('IV. –ò–º–ø–µ—Ä–∞—Ç–æ—Ä', f'{prefix}_emperor'),
            ('V. –ò–µ—Ä–æ—Ñ–∞–Ω—Ç', f'{prefix}_hierophant'),
            ('VI. –í–ª—é–±–ª—ë–Ω–Ω—ã–µ', f'{prefix}_lovers'),
            ('VII. –ö–æ–ª–µ—Å–Ω–∏—Ü–∞', f'{prefix}_chariot'),
            ('VIII. –°–∏–ª–∞', f'{prefix}_strength'),
            ('IX. –û—Ç—à–µ–ª—å–Ω–∏–∫', f'{prefix}_hermit'),
            ('X. –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã', f'{prefix}_wheel_of_fortune'),
            ('XI. –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å', f'{prefix}_justice'),
            ('XII. –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π', f'{prefix}_hanged_man'),
            ('XIII. –°–º–µ—Ä—Ç—å', f'{prefix}_death'),
            ('XIV. –£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', f'{prefix}_temperance'),
            ('XV. –î—å—è–≤–æ–ª', f'{prefix}_devil'),
            ('XVI. –ë–∞—à–Ω—è', f'{prefix}_tower'),
            ('XVII. –ó–≤–µ–∑–¥–∞', f'{prefix}_star'),
            ('XVIII. –õ—É–Ω–∞', f'{prefix}_moon'),
            ('XIX. –°–æ–ª–Ω—Ü–µ', f'{prefix}_sun'),
            ('XX. –°—É–¥', f'{prefix}_judgement'),
            ('XXI. –ú–∏—Ä', f'{prefix}_world')
        ]
        
        buttons = [types.InlineKeyboardButton(text, callback_data=cb) for text, cb in cards]
        markup.add(*buttons)
        
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ä—à–∏–π –∞—Ä–∫–∞–Ω:",
            callback.message.chat.id,
            callback.message.message_id,
            reply_markup=markup
        )
    
    elif card_type in ['sword', 'wand', 'cup', 'pentacle']:
        # –ú–ª–∞–¥—à–∏–µ –∞—Ä–∫–∞–Ω—ã
        markup = types.InlineKeyboardMarkup(row_width=4)
        
        cards = [
            ('–¢—É–∑', f'{prefix}_ace_{card_type}'),
            ('2', f'{prefix}_2_{card_type}'),
            ('3', f'{prefix}_3_{card_type}'),
            ('4', f'{prefix}_4_{card_type}'),
            ('5', f'{prefix}_5_{card_type}'),
            ('6', f'{prefix}_6_{card_type}'),
            ('7', f'{prefix}_7_{card_type}'),
            ('8', f'{prefix}_8_{card_type}'),
            ('9', f'{prefix}_9_{card_type}'),
            ('10', f'{prefix}_10_{card_type}'),
            ('–ü–∞–∂', f'{prefix}_page_{card_type}'),
            ('–†—ã—Ü–∞—Ä—å', f'{prefix}_knight_{card_type}'),
            ('–ö–æ—Ä–æ–ª–µ–≤–∞', f'{prefix}_queen_{card_type}'),
            ('–ö–æ—Ä–æ–ª—å', f'{prefix}_king_{card_type}')
        ]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 4 –∫–Ω–æ–ø–∫–∏
        for i in range(0, len(cards), 4):
            row = cards[i:i+4]
            markup.row(*[types.InlineKeyboardButton(text, callback_data=cb) for text, cb in row])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å—Ç–∏
        suit_name = {
            'sword': '–ú–µ—á–∏',
            'wand': '–ñ–µ–∑–ª—ã',
            'cup': '–ö—É–±–∫–∏',
            'pentacle': '–ü–µ–Ω—Ç–∞–∫–ª–∏'
        }.get(card_type, '')
        
        bot.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –º–∞—Å—Ç–∏ {suit_name}:",
            callback.message.chat.id,
            callback.message.message_id,
            reply_markup=markup
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
    elif any(x in callback.data for x in ['fool', 'magician', 'ace_', 'page_', '2_', '3_']):
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
        card_name = callback.data.replace(f'{prefix}_', '')
        bot.answer_callback_query(callback.id, f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞: {card_name}")

@bot.message_handler(commands=['daily']) #–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
def daily_command(message):
    card = get_daily_card()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
    if not card:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    send_card_info(message.chat.id, card)

def get_daily_card():
    conn = sqlite3.connect('tarot.sqlite3')
    cursor = conn.cursor()
    
    random_card_id = random.randint(1, 312)
    
    cursor.execute("""
        SELECT 
            c.card_name,
            c.card_number,
            c.arcana_type,
            c.suit,
            dc.image_url,
            m.daily_meaning,
            m.keywords,
            m.general_upright,
            m.general_reversed
        FROM 
            meanings m
        JOIN 
            deck_cards dc ON m.deck_card_id = dc.id
        JOIN 
            cards c ON dc.card_id = c.id
        WHERE 
            m.deck_card_id = ?
    """, (random_card_id,))
    
    card_data = cursor.fetchone()
    conn.close()
    
    if card_data:
        return {
            'name': card_data[0],
            'number': card_data[1],
            'arcana': card_data[2],
            'suit': card_data[3],
            'image_url': card_data[4],
            'daily_meaning': card_data[5],
            'keywords': card_data[6],
            'general_upright': card_data[7],
            'general_reversed': card_data[8]
        }
    return None

def send_card_info(chat_id, card):
  card_text = (
    f"‚ú® <b>–ö–∞—Ä—Ç–∞ –¥–Ω—è:</b> {card['name']}\n"
    f"üî¢ <b>–ù–æ–º–µ—Ä:</b> {card['number']}\n"
    f"üé¥ <b>–ú–∞—Å—Ç—å:</b> {card['suit'] if card['suit'] else '–°—Ç–∞—Ä—à–∏–π –∞—Ä–∫–∞–Ω'}\n\n"
    f"üìú <b>–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è:</b>\n{card['daily_meaning']}\n\n"
    f"üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {card['keywords']}"
  )
  
  #if card['image_url']:
  #  bot.send_photo(chat_id, card['image_url'], caption=card_text, parse_mode="HTML")
  #else:
  #  bot.send_message(chat_id, card_text, parse_mode="HTML")
  bot.send_message(chat_id, card_text, parse_mode="HTML")

@bot.message_handler(commands=['spreads'])#
def spreads(message):
  markup = types.InlineKeyboardMarkup(row_width=2)
  
  buttons = [
      ('–†–∞—Å–∫–ª–∞–¥ –ö–∞—Ä—Ç–∞ –î–Ω—è', 'sp_day'),
      ('–†–∞—Å–∫–ª–∞–¥ –¢—Ä–∏ –∫–∞—Ä—Ç—ã', 'sp_three'),
      ('–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', 'sp_rel'),
      ('–†–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –ö—Ä–µ—Å—Ç', 'sp_kel'),
      ('–†–∞—Å–∫–ª–∞–¥ –í—ã–±–æ—Ä', 'sp_choice'),
      ('–†–∞—Å–∫–ª–∞–¥ –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', 'sp_moon'),
      ('–†–∞—Å–∫–ª–∞–¥ –°–æ–≤–µ—Ç –æ—Ç –¢–∞—Ä–æ', 'sp_advice'),
      ('–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–∞—Ä–æ–ª–æ–≥–∞ 1', 'directory1'),
      ('–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–∞—Ä–æ–ª–æ–≥–∞ 2', 'directory2')
  ]
  
  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
  for i in range(0, len(buttons), 2):
      row = buttons[i:i+2]
      markup.row(*[types.InlineKeyboardButton(text, callback_data=cb) for text, cb in row])

  bot.send_message(message.chat.id, 'spreads', reply_markup=markup)

@bot.message_handler(commands=['custom_spread'])#
def custom_spread(message):
  bot.send_message(message.chat.id, 'custom_spread')

@bot.message_handler(commands=['buy_deck'])#
def buy_deck(message):
  bot.send_message(message.chat.id, 'buy_deck')

@bot.message_handler(commands=['help'])
def help(message):
  help_text = (
    f"üìú <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–º–æ—â–Ω–∏–∫–∞ —Ç–∞—Ä–æ–ª–æ–≥–∞</b>\n\n"
  
    f"üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n"
    f"/start ‚Äì –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
    f"/help ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
    f"/decks ‚Äì –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã\n\n"
    
    f"üîÆ <b>–†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–∞–º–∏</b>\n"
    f"/card ‚Äì —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äì –£—ç–π—Ç)\n"
    f"/meaning ‚Äì —É–∑–Ω–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (–ø—Ä—è–º–æ–µ/–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–µ):\n"
    f"  ‚Ä¢ –û–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ\n"
    f"  ‚Ä¢ –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤ –ª—é–±–≤–∏\n"
    f"  ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –∫–∞—Ä—Ç—ã –¥–Ω—è\n"
    f"(–≤—ã–±–æ—Ä –∫–æ–ª–æ–¥—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)\n"
    f"/daily ‚Äì –∫–∞—Ä—Ç–∞ –¥–Ω—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äì –£—ç–π—Ç)\n\n"
    
    f"üÉè <b>–†–∞—Å–∫–ª–∞–¥—ã</b>\n"
    f"/spreads ‚Äì —Å–ø–∏—Å–æ–∫ –≤–∏–¥–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–≤–µ—Ç—ã, —Ñ–æ—Ç–æ)\n"
    f"/custom_spread ‚Äì –≤—Ä—É—á–Ω—É—é –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–∫—Ç–æ–≤–∫—É –∏—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π\n"
    f"/buy_deck ‚Äì –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º –∫–æ–ª–æ–¥–∞–º –∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n\n"
    
    f"‚öôÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>\n"
    f"/feedback ‚Äì –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n\n"
    
    f"(–ë–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –∫–æ–ª–æ–¥ –∏ –¥–∞—ë—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏!)\n\n"
    
    f"üíé <b>–ü—Ä–µ–º–∏—É–º:</b> –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –∫–æ–ª–æ–¥–∞–º –¢–æ—Ç–∞, –ú–∞—Ä—Å–µ–ª—å—Å–∫–æ–π, –¢–µ–Ω–µ–π –∏ –¥—Ä. —á–µ—Ä–µ–∑ /buy_deck.\n\n"
    f"–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ? –ù–∞–∂–º–∏ /start! üîç‚ú®"
  ) 
  bot.send_message(message.chat.id, help_text, parse_mode='html')

@bot.message_handler(commands=['feedback']) # –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ—Ç–µ—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç—ã(–æ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π? –º–± –¥–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ —è —Å–∞–º–∞ –ø–∏—à—É –æ—Ç–∑—ã–≤—ã –∏ –æ–Ω–∏ –º–Ω–µ –∂–µ –ø—Ä–∏—Ö–æ–¥—è—Ç)
def feedback(message):
  conn = sqlite3.connect('feedback.sqlite3')
  cursor = conn.cursor()
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (1 –æ—Ç–∑—ã–≤ –≤ —á–∞—Å)
  #cursor.execute("SELECT created_at FROM feedback WHERE user_id = ? ORDER BY created_at DESC LIMIT 1", (message.from_user.id,))
  #last_feedback = cursor.fetchone()
  #if last_feedback and (datetime.now() - datetime.strptime(last_feedback[0], '%Y-%m-%d %H:%M:%S')) < timedelta(hours=1):
  #  bot.send_message(message.chat.id, "‚è≥ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  #  conn.close()
  #  bot.register_next_step_handler(message, on_click) # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  #  return
  
  msg = bot.send_message(message.chat.id, "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
  msg.is_feedback = True # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–∏–¥–±—ç–∫–∞
  bot.register_next_step_handler(msg, process_feedback)

def process_feedback(message):
  conn = sqlite3.connect('feedback.sqlite3')
  cursor = conn.cursor()
  message.is_feedback = True # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–∏–¥–±—ç–∫–∞
  
  cursor.execute("INSERT INTO feedback (user_id, username, text, created_at) VALUES (?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, message.text, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
  conn.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
  feedback_id = cursor.lastrowid
  
  markup = types.InlineKeyboardMarkup()
  markup.add(types.InlineKeyboardButton("‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{feedback_id}"))
  
  feedback_text = (
    f"üì© <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b> (#{feedback_id})\n\n"
    f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username} (<code>{message.from_user.id}</code>)\n"
    f"üïí <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<code>{message.text}</code>"
  )
  bot.send_message(ADMIN_CHAT_ID, feedback_text, parse_mode="HTML", reply_markup=markup)
  
  bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
  conn.close()
  bot.register_next_step_handler(message, on_click)

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_')) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
def handle_admin_reply(call):
  feedback_id = call.data.split('_')[1]
  msg = bot.send_message(ADMIN_CHAT_ID, f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ #{feedback_id}:")
  bot.register_next_step_handler(msg, lambda m: process_admin_reply(m, feedback_id))

def process_admin_reply(message, feedback_id):
  conn = sqlite3.connect(FEEDBACK_DB)
  try:
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, text FROM feedback WHERE id = ?", (feedback_id,)) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
    feedback_data = cursor.fetchone()
    
    if feedback_data:
      user_id, feedback_text = feedback_data
      
      cursor.execute("UPDATE feedback SET admin_reply = ? WHERE id = ?", (message.text, feedback_id))
      conn.commit() # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
      
      try: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id,
          f"üì¨ <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à –æ—Ç–∑—ã–≤:</b>\n\n"
          f"<i>–í–∞—à –æ—Ç–∑—ã–≤:</i>\n<code>{feedback_text}</code>\n\n"
          f"<i>–û—Ç–≤–µ—Ç:</i>\n<code>{message.text}</code>", parse_mode="HTML"
        )
        bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ #{feedback_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
      except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
  except Exception as e:
    bot.send_message(ADMIN_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
  finally:
    conn.close()

bot.polling(non_stop=True)